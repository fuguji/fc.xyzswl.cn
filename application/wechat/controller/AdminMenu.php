<?php

// +----------------------------------------------------------------------
// | 鸣鹤CMS [ New Better  ]
// +----------------------------------------------------------------------
// | Copyright (c) 2006~2017 http://www.mhcms.net All rights reserved.
// +----------------------------------------------------------------------
// | Licensed ( 您必须获取授权才能进行使用 )
// +----------------------------------------------------------------------
// | Author: new better <1620298436@qq.com>
// +----------------------------------------------------------------------

namespace app\wechat\controller;

use app\common\controller\AdminBase;
use app\common\model\Models;
use app\common\model\SitesWechat;
use app\common\model\UserMenu;
use app\common\util\Tree2;
use app\wechat\util\MhcmsWechatAccountBase;
use app\wechat\util\MhcmsWechatEngine;
use think\Db;

class AdminMenu extends AdminBase
{

    public $sites_wechat_menus = "sites_wechat_menus";
    public function _initialize()
    {
        global $_W;
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->check_admin_auth($_W['account']);
    }
    /**
     * @return string
     * @throws \Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function index(){
        global $_W, $_GPC;
        $category_items = array();
        //自定义筛选条件
        $where = [];
        //获取模型信息
        $model = set_model($this->sites_wechat_menus);
        $model_info = $model->model_info;
        $this->form_factory->model_id = $model_info['id'];
        $tree = new Tree2();
        $tree->icon = array('&nbsp;&nbsp;&nbsp;│ ', '&nbsp;&nbsp;&nbsp;├─ ', '&nbsp;&nbsp;&nbsp;└─ ');
        $tree->nbsp = '&nbsp;&nbsp;&nbsp;';
        $tree_data = array();
        //data module
        if (Models::field_exits('module', $this->sites_wechat_menus)) {
            $where['module'] = ROUTE_M;
        }

        $where['site_id'] = $_W['site']['id'];
        //读取缓存
        $lists = $model->where($where)->order('listorder desc')->select();
        $show_detail = count($lists) < 500 ? 1 : 0;
//        $parent_id = $_GPC['parent_id'] ? intval($_GPC['parent_id']) : 0;
        $html_root = "";
        $types = array("view" => zlang('view'), "miniprogram" => zlang('小程序'), 3 => zlang('外链接'));
        if (!empty($lists)) {
            foreach ($lists as $r) {
                $r['modelname'] = isset($r['module']) ? $r['module'] : "";
                $r['str_manage'] = '';
                //栏目数量较少
                foreach ($this->view->sub_menu as $menu) {

                    if ($menu['user_menu_display'] == 0) {
                        $mapping = $r;
                        $mini = $menu['user_menu_mini'];
                        $r['str_manage'] .= build_back_a($menu['id'], $menu['user_menu_params'], zlang($menu['user_menu_name']), $menu['user_menu_mini'], $menu['class'], '90%', '80%', $mapping);
                    }
                }
                $r['typename'] = $types[$r['type']];
                $r['display_icon'] = isset($r['status']) && $r['status']==1 ? 'show' : 'hide';

                $r['help'] = '';
                $tree_data[$r['id']] = $r;
            }
        }
        $str = "<tr>
                    <td align='center'>
					<input type='text' pk='id' pk_value='\$id' class='layui-input listorder' field='listorder' model='{$this->sites_wechat_menus}' mini='blur' id='\$id' value='\$listorder' />
					</td>
					<td align='center'>\$id</td>
					<td >\$spacer\$name</td>
					<td>\$type</td>
					<td><i class='\$display_icon icon'></i></td>
					<td align='center' >\$str_manage</td>
				</tr>";
        $tree->init($tree_data);
        $this->view->tree_data = $tree->get_tree(0, $str);

        $this->view->mapping = $this->mapping;
        return $this->view->fetch();
    }
    public function index_old()
    {
        global $_W;

        $this->content_model_id = $this->sites_wechat_menus;

        //自定义筛选条件
        $where = [];
        //获取模型信息
        $model = set_model($this->content_model_id);
        /** @var Models $model_info */
        $model_info = $model->model_info;
        $this->form_factory->model_id = $model_info['id'];
        //字段列表 没有设置则默认为[]
        $new_field_list = is_array($model_info['setting']['fields']) ? $model_info['setting']['fields'] : [];
        foreach ($new_field_list as $k => $field) {
            if (empty($field['node_field_mode']) || empty($field['show_admin_colum']) || $field['node_field_disabled'] == 1) {
                unset($new_field_list[$k]);
                continue;
            }
            $field['form_str'] = $this->form_factory->config_model_form($field);
            $new_field_list[$k] = $field;
        }
        //data list 如果不是超级管理员 并且数据是区分站群的
        if (Models::field_exits('site_id', $this->content_model_id)) {
            $where['site_id'] = $this->site['id'];
        }

        //分配到当前模块
        if (Models::field_exits('module', $this->content_model_id)) {
            $where['module'] = ROUTE_M;
        }

        $keyword = input('param.keyword');

        if ($keyword && $model_info['search_keys']) {
            $search_keys = str_replace(",", "|", $model_info['search_keys']);
            $model = $model->where($search_keys, 'like', "%$keyword%");
            $this->view->keyword = $keyword;
        }

        $lists = $model->where($where)->order("site_id desc")->paginate();
        //列表数据
        $this->view->lists = $lists;
        //fields
        $this->view->field_list = $new_field_list;
        //model_info
        $this->view->model_info = $model_info;
        //+--------------------------------以下为系统--------------------------
        //模板替换变量
        $this->mapping['site_id'] = $_W['site']['id'];
        $this->view->mapping = $this->mapping;
        $this->view->content_model_id = $this->content_model_id;
        return $this->view->fetch();
    }

    /**
     * @return mixed
     * @throws \think\Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * @throws \think\exception\PDOException
     */
    public function add()
    {
        global $_GPC;
        //后去模型信息
        $model = set_model($this->sites_wechat_menus);
        /** @var Models $model_info */
        $model_info = $model->model_info;
        //手动处理类型的模型
        if ($this->isPost() && $model_info) {
            if (isset($_GPC['_form_manual'])) {
                //手动处理数据
                $base_info = $_GPC;
            } else {
                //自动获取data分组数据
                $base_info = input('post.data/a');//get the base info
            }

            //分配到当前模块
            if (Models::field_exits('module', $this->sites_wechat_menus)) {
                $base_info['module'] = ROUTE_M;
            }

            $res = $model_info->add_content($base_info);
            if (isset($res['parent_id']) && $res['parent_id']) {
                //todo add children
                $data = [];
                $data['children'] .= "," . $res['item']['id'];
                Db::name("article_cate")->where(['id' => $res['parent_id']])->update($data);
            }
            if ($res['code'] == 1) {
                return $this->zbn_msg($res['msg'], 1, 'true', 1000, "''", "'reload_page()'");
            } else {
                return $this->zbn_msg($res['msg'], 2);
            }
        } else {
            //todo auth
            //模板数据
            $this->view->list = $model_info->get_admin_publish_fields();
            $this->view->model_info = $model_info;
            return $this->view->fetch();
        }
    }

    /**
     * @param $id
     * @return mixed
     * @throws \think\Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * @throws \think\exception\PDOException
     */
    public function edit($id)
    {
        global $_GPC;
        $id = (int)$id;
        $model = set_model($this->sites_wechat_menus);
        /** @var Models $model_info */
        $model_info = $model->model_info;
        //$model_info = Models::get(['id' => $this->zwt_department]);
        $where = ['id' => $id];
        $detail = Db::name($model_info['table_name'])->where($where)->find();
        if ($this->isPost() && $model_info) {
            if (isset($_GPC['_form_manual'])) {
                //手动处理数据
                $data = $_GPC;
            } else {
                //自动获取data分组数据
                $data = input('post.data/a');//get the base info
            }
            // todo  process data input
            $model_info->edit_content($data, $where);
            $this->zbn_msg("ok");
        } else {
            //todo auth
            //模板数据
            $this->view->list = $model_info->get_admin_publish_fields($detail);
            $this->view->model_info = $model_info;
            return $this->view->fetch();
        }
    }


    public function upload()
    {
        global $_W;
        $menu = self::get_menu_data();
        if(!$menu){
            $this->download();
        }
        $account_api = MhcmsWechatEngine::create($_W['account']);
        $result = $account_api->menuCreate($menu);

        if($result['code']===1){
            return $result;
        }else{
            return ['code'=>2 , 'msg' => $result['msg']];
        }
    }

    public function download(){
        global $_W;
        $menu = self::get_menu_data();
        $account_api = MhcmsWechatEngine::create($_W['account']);
        $result = $account_api->menuQuery();

        //todo delete all the local buttons
        set_model('sites_wechat_menus')->where([ 'site_id'=> $_W['site']['id']])->delete();
        foreach($result['menu']['button'] as $menu){

            //todo create level one menu
            $_level_one = [];
            $_level_one['site_id'] = $_W['site']['id'];
            $_level_one['name'] = $menu['name'];
            if(count($menu['sub_button']) > 0){
                $pid = set_model('sites_wechat_menus')->insert($_level_one , false , true);
                //  level one menu
                foreach($menu['sub_button'] as $sub_menu){
                    unset($sub_menu['sub_button']);
                    $sub_menu['parent_id'] = $pid;
                    $sub_menu['site_id'] = $_W['site']['id'];
                    set_model('sites_wechat_menus')->insert($sub_menu , false , true);
                }
            }else{
                $_level_one['url'] = $menu['url'] ? $menu['url'] : "";
                $_level_one = array_merge($_level_one , $menu);
                unset($_level_one['sub_button']);
                $pid = set_model('sites_wechat_menus')->insert($_level_one , false , true);
            }
        }
        if($pid){
            return ['code'=>1 ,  'msg' => "操作完成"];
        }else{
            return ['code'=>2 , 'msg' => $result['msg']];
        }
    }

    public static function get_menu_data(){
        global $_W;
        $menu = [];
        //获取层级菜单 前三个
        $top_menus = set_model('sites_wechat_menus')->where(['parent_id' => 0 , 'site_id'=> $_W['site']['id'], 'status'=>1])->order('listorder desc')->limit(3)->select()->toArray();

        //子菜单取前5个
        foreach($top_menus as $k=>$item){
            $top_menus[$k]['sub_button'] = set_model('sites_wechat_menus')->where(['parent_id' => $item['id'] , 'status'=>1])->order('listorder desc')->limit(5)->select()->toArray();
        }

        foreach ($top_menus as $button) {
            $temp = array();
            $temp['name'] = preg_replace_callback('/\:\:([0-9a-zA-Z_-]+)\:\:/', create_function('$matches', 'return utf8_bytes(hexdec($matches[1]));'), $button['name']);
            $temp['name'] = urlencode($temp['name']);
            if (empty($button['sub_button'])) {
                $temp['type'] = $button['type'];
                if ($button['type'] == 'view') {
                    $temp['url'] = urlencode($button['url']);
                } elseif ($button['type'] == 'click') {
                    if (!empty($button['media_id']) && empty($button['key'])) {
                        $temp['media_id'] = urlencode($button['media_id']);
                        $temp['type'] = 'media_id';
                    } elseif (empty($button['media_id']) && !empty($button['key'])) {
                        $temp['type'] = 'click';
                        $temp['key'] = urlencode($button['key']);
                    }
                } elseif ($button['type'] == 'media_id' || $button['type'] == 'view_limited') {
                    $temp['media_id'] = urlencode($button['media_id']);
                } elseif ($button['type'] == 'miniprogram') {
                    $temp['appid'] = trim($button['appid']);
                    $temp['pagepath'] = urlencode($button['pagepath']);
                    $temp['url'] = urlencode($button['url']);
                } else {
                    $temp['key'] = urlencode($button['key']);
                }
            } else {
                foreach ($button['sub_button'] as $sub_button) {
                    $sub_temp = array();
                    $sub_temp['name'] = preg_replace_callback('/\:\:([0-9a-zA-Z_-]+)\:\:/', create_function('$matches', 'return utf8_bytes(hexdec($matches[1]));'), $sub_button['name']);
                    $sub_temp['name'] = urlencode($sub_temp['name']);
                    $sub_temp['type'] = $sub_button['type'];
                    if ($sub_button['type'] == 'view') {
                        $sub_temp['url'] = urlencode($sub_button['url']);
                    } elseif ($sub_button['type'] == 'click') {
                        if (!empty($sub_button['media_id']) && empty($sub_button['key'])) {
                            $sub_temp['media_id'] = urlencode($sub_button['media_id']);
                            $sub_temp['type'] = 'media_id';
                        } elseif (empty($sub_button['media_id']) && !empty($sub_button['key'])) {
                            $sub_temp['type'] = 'click';
                            $sub_temp['key'] = urlencode($sub_button['key']);
                        }
                    } elseif ($sub_button['type'] == 'media_id' || $sub_button['type'] == 'view_limited') {
                        $sub_temp['media_id'] = urlencode($sub_button['media_id']);
                    } elseif ($sub_button['type'] == 'miniprogram') {
                        $sub_temp['appid'] = trim($sub_button['appid']);
                        $sub_temp['pagepath'] = urlencode($sub_button['pagepath']);
                        $sub_temp['url'] = urlencode($sub_button['url']);
                    } else {
                        $sub_temp['key'] = urlencode($sub_button['key']);
                    }
                    $temp['sub_button'][] = $sub_temp;
                }
            }
            $menu['button'][] = $temp;
        }

        return $menu;
    }

    public function delete($id)
    {
        $id = (int)$id;
        set_model($this->sites_wechat_menus)->where(['id' => $id])->delete();
        return ['code' => 0, 'msg' => '删除成功'];
    }
}