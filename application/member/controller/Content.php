<?php

namespace app\member\controller;

use app\common\controller\UserBase;
use app\common\model\Node;
use app\common\model\NodeIndex;
use app\common\model\NodeTypes;

class Content extends UserBase
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->node->user_id = $this->user_id;
    }

    public function published($id = 0)
    {
        $node_type_id =(int)  $id;
        $where['root_id'] = $GLOBALS['root_id'];

        if ($GLOBALS['cache_site_id'] != 0) {
            $where['site_id'] = $GLOBALS['site_id'];
        }

        if($node_type_id){
            $where['node_type_id'] = $node_type_id;
        }

        $where['user_id'] = $this->user['id'];
        /**
         *
        $linkage = show_linkage($this->user->linkage , true);
        if($linkage->arrchildid){
            $where['linkage'] = [
                'IN'  , [$linkage->arrchildid]
            ];
        }else{
            $where['linkage'] = $linkage->linkageid;
        }
         */
        $list = $this->node->where($where)->order('node_id desc')->paginate(config('list_rows'));

        $this->mapping['node_type_id'] = $node_type_id;
        $pages = $list->render();
        $this->view->assign('list', $list);
        $this->view->node_model = $this->node;
        $this->view->mapping = $this->mapping;
        $this->view->assign('pages', $pages);

        return $this->view->fetch();
    }

    public function publish($id = 0)
    {
        $node_type_id =(int) $id;
        $node_type_info = NodeTypes::get($node_type_id);
        $edit = 0;
        if($node_type_info['amount_per_user'] == 1){
            $index = NodeIndex::get(['user_id' => $this->user->user_id ,'node_type_id' => $node_type_id]);

            if(!$index){
                if($node_type_info['as_user_types'] == 1){
                    //if it is a user model , fix lost extra info
                    //TODO when the user extra info does not exist
                    $base_info = [];
                    //create the node
                    $base_info['user_id'] = $this->user['id'];
                    $base_info['title'] = ' ';
                    $this->node->setNodeType($node_type_id); //
                    $this->node->form_factory = $this->form_factory;
                    $node = $this->node->add_node($base_info, []); //
                    $this->error("稍等一下，自动修复中！");
                }
            }else{
                $node = $this->node->get_node($index->node_id);
                //TODO 是否允许自行修改

                //if the info is under check .make the user wait
                if(isset($node['node_status']) && $node['node_status'] == 0){
                    $this->error("您好 您提交的{$node_type_info['node_type_name']}信息正在审核，请耐心等待！");
                }
                if(strlen($node['title'])>1){
                    $this->error("请联系客服修改{$node_type_info['node_type_name']}信息！");
                }
                $edit = 1;
            }
        }
        if($this->isPost()){

            $base_info = input( 'post.base/a' );//get the base info
            $external  = input( 'post.external/a' );//external data
            $this->node->setNodeType( $node_type_info['node_type_id'] ); //制定节点类型
            $this->node->form_factory = $this->form_factory;//$this->model->parent_id    = $parent_id; //$this->model->user_id      = $this->admin_id; //指定用户 //$this->model->site_id      = $this->site_id;
            //add info into the top node
            if($edit){
                $this->node->node_id = $node['node_id'];
                $res = $this->node->edit_node( $base_info, $external ); //编辑信息
            }else{
                $res = $this->node->add_node( $base_info, $external ); //增加信息
            }

            if ( $res['code'] == 1 ) {
                $url = nb_url(['r'=>'member/content/published']);
                return $this->zbn_msg( $res['msg'] , 1 , 'true' , 5000 , "'$url'");
            } else {
                return $this->zbn_msg( $res['msg'], 2 );
            }
        }else{
            if (empty($node_type_id)) {
                $this->view->node_types = $this->site->get_node_types();
                return $this->view->fetch('publish_node_type');
            } else {

                //TODO： 权限判断 是否可以编辑
                if (  $node_type_info['root_id']!=$this->user['root_id'] ) {

                }

                $this->form_factory->node_type_id = $node_type_info['node_type_id'];
                $new_field_list                   = $node_type_info->getNodeFields();
                foreach ( $new_field_list as $k => $field ) {
                    if ( empty( $field['node_field_mode'] ) || ! $field['node_field_asform'] || $field['node_field_disabled'] == 1 ) {
                        unset( $new_field_list[ $k ] );
                        continue;
                    }
                    if($edit){
                        $field['node_field_default_value'] = $node[$field['node_field_name']];
                    }
                    $field['form_str']    = $this->form_factory->config_form( $field );
                    $new_field_list[ $k ] = $field;
                }
                $this->view->assign( 'list', $new_field_list );
                $this->view->assign( 'node_type', $node_type_info );

                $this->view->assign( 'node_type_name', $node_type_info['node_type_name'] );
                return $this->view->fetch();
            }
        }
    }
}