<?php
namespace app\update\controller;

use app\update\util\Upgrade;
use think\Cache;
use think\Config;
use think\Controller;
use think\Db;
use think\Request;

class Index extends Controller
{
    public static function check($product_licence_code)
    {
        global $_GPC;
        if (!$product_licence_code) {
            //todo load licence from cache
            Config::load(CONF_PATH . 'licence.php');
            $product_licence_code = config('licence.product_licence_code');
        }
        $url = API_URL . 'product/licence/check';
        $data['product_sign'] = MODULE_NAME;
        $data['product_licence_code'] = $product_licence_code;
        $data['domain'] = $_SERVER['HTTP_HOST'];
        $res = ihttp_post($url, $data);
        $res = $res['content'];
        if ($res == "OK") {
            $licence['licence'] = $data;
            self::write_config('licence', $licence);
        }
        return $res;
    }

    private static function write_config($config_name, $data)
    {
        file_put_contents(CONF_PATH . $config_name . ".php", '<?php return ' . var_export($data, true) . ';');
    }

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        define("API_URL", "http://cloud.bao8.org/");
    }

    public function index($module = 'system')
    {
        $has_new_version = Upgrade::check_version($module);
        if ($has_new_version['code'] ==0) {
            $this->error("您已经是最新版本了！" . $has_new_version['data']['data']['version']);
        }else{
            $target_version = Cache::get($module . '_target_version');
            $this->view->module = $module;
            return $this->view->fetch();
        }

    }

    public function check_update($module = 'system')
    {
        $has_new_version = Upgrade::check_version($module);
        if ($has_new_version['code'] == 1) {
            $ret['code'] = 1;
            $ret['msg'] = "检测到新版程序！请根据需要是否升级！" . $has_new_version['data']['data']['version'];
        }else{
            $ret['code'] = 2;
            $ret['msg'] = "";
        }
        return $ret;
    }

    public function start_update($step, $module = 'system')
    {
        global $_GPC;
        $this->module = $module;
        $_GPC = input('param.');
        //并展示下一步安装界面
        switch ($step) {
            case 1:
                $data = [];
                $data['env'] = self::checkNnv();
                $data['dir'] = self::checkDir();
                $data['func'] = self::checkFunc();
                $this->view->data = $data;
                break;
            case 4:
                // 获取系统需要更新的表

                $this->do_step_3();
                break;
            case 5:
                //todo 获取系统需要更新的表
                $this->do_step_4();
                break;
            case 6 :
                //todo write lastupdate info
                Cache::set($module . "_last_update", time());
                Cache::set($module . '_version', Cache::get($module . '_target_version'));
                break;
        }
        $this->view->module = $module;
        return $this->view->fetch($step);
    }
    /**
     * 环境检测
     * @return array
     */
    private function checkNnv()
    {
        $items = [
            'os' => ['操作系统', '不限制', '类Unix', PHP_OS, 'ok'],
            'php' => ['PHP版本', '5.5', '5.5及以上', PHP_VERSION, 'ok'],
            'gd' => ['GD库', '2.0', '2.0及以上', '未知', 'ok'],
        ];
        if ($items['php'][3] < $items['php'][1]) {
            $items['php'][4] = 'no';
            session('install_error', true);
        }
        $tmp = function_exists('gd_info') ? gd_info() : [];
        if (empty($tmp['GD Version'])) {
            $items['gd'][3] = '未安装';
            $items['gd'][4] = 'no';
            session('install_error', true);
        } else {
            $items['gd'][3] = $tmp['GD Version'];
        }
        return $items;
    }
    /**
     *
     *  检测目录是否可写
     **/
    public static function checkDir()
    {
        $chmod_file = "chmod.txt";
        $files = file(CONF_PATH . $chmod_file);
        foreach ($files as $_k => $file) {
            $file = str_replace('*', '', $file);
            $file = trim($file);
            if (is_dir(SYS_PATH . $file)) {
                $is_dir = '1';
                $cname = '目录';
                //继续检查子目录权限，新加函数
                $write_able = writable_check(SYS_PATH . $file);
            } else {
                $is_dir = '0';
                $cname = '文件';
            }
            //新的判断
            if ($is_dir == '0' && is_writable(SYS_PATH . $file)) {
                $is_writable = 1;
            } elseif ($is_dir == '1' && dir_writeable(SYS_PATH . $file)) {
                $is_writable = $write_able;
                if ($is_writable == '0') {
                    $no_writablefile = 1;
                }
            } else {
                $is_writable = 0;
                $no_writablefile = 1;
            }
            $filesmod[$_k]['file'] = $file;
            $filesmod[$_k]['is_dir'] = $is_dir;
            $filesmod[$_k]['cname'] = $cname;
            $filesmod[$_k]['is_writable'] = $is_writable;
        }
        return $filesmod;
    }
    /**
     * 函数及扩展检查
     * @return array
     */
    private function checkFunc()
    {
        $items = [
            ['pdo', '支持', 'yes', '类'],
            ['pdo_mysql', '支持', 'yes', '模块'],
            ['fileinfo', '支持', 'yes', '模块'],
            ['curl', '支持', 'yes', '模块'],
            ['xml', '支持', 'yes', '函数'],
            ['file_get_contents', '支持', 'yes', '函数'],
            ['mb_strlen', '支持', 'yes', '函数'],
            ['gzopen', '支持', 'yes', '函数'],
        ];
        foreach ($items as &$v) {
            if (('类' == $v[3] && !class_exists($v[0])) || ('模块' == $v[3] && !extension_loaded($v[0])) || ('函数' == $v[3] && !function_exists($v[0]))) {
                $v[1] = '不支持';
                $v[2] = 'no';
                session('install_error', true);
            }
        }
        return $items;
    }
    /**
     * 第三部 计算出需要更新的文件列表
     */
    public function do_step_3()
    {
        global $_GPC;
        //计算文件差
        $updater = new Upgrade();
        $files_to_update = $updater->file_diff($this->module);
        if (!is_array($files_to_update)) {
            $this->error($files_to_update);
        }
        $this->view->files_to_update = json_encode($files_to_update);
    }
    /**
     * 第四部 更新数据库
     */
    public function do_step_4()
    {
        global $_GPC;
        $tables = Upgrade::get_models($this->module);
        //\app\core\util\UpgradeDb::fix();
        if (!is_array($tables['data'])) {
            $tables['data'] = [];
        }
        $this->view->sys_tables = $tables;
    }
    /*
     * 下载文件
     * 模块 文件md5
     */
    public function update_model($table, $module)
    {
        Upgrade::update_model($table, $module);
    }
    public function download_file($module, $file_path)
    {
        $res = Upgrade::down_file($module, $file_path);
        return $res;
    }
    /**
     * 生成数据库配置文件
     * @return array
     */
    private function write_db_config(array $data)
    {
        $code = <<<INFO
<?php
// +----------------------------------------------------------------------
// | ThinkPHP [ WE CAN DO IT JUST THINK ]
// +----------------------------------------------------------------------
// | Copyright (c) 2006~2016 http://thinkphp.cn All rights reserved.
// +----------------------------------------------------------------------
// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )
// +----------------------------------------------------------------------
// | Author: liu21st <liu21st@gmail.com>
// +----------------------------------------------------------------------
return [
    // 数据库类型
    'type'            => 'mysql',
    // 服务器地址
    'hostname'        => '{$data['hostname']}',
    // 数据库名
    'database'        => '{$data['database']}',
    // 用户名
    'username'        => '{$data['username']}',
    // 密码
    'password'        => '{$data['password']}',
    // 端口
    'hostport'        => '{$data['hostport']}',
    // 连接dsn
    'dsn'             => '',
    // 数据库连接参数
    'params'          => [],
    // 数据库编码默认采用utf8
    'charset'         => 'utf8',
    // 数据库表前缀
    'prefix'          => '{$data['prefix']}',
    // 数据库调试模式
    'debug'           => true,
    // 数据库部署方式:0 集中式(单一服务器),1 分布式(主从服务器)
    'deploy'          => 0,
    // 数据库读写是否分离 主从式有效
    'rw_separate'     => false,
    // 读写分离后 主服务器数量
    'master_num'      => 1,
    // 指定从服务器序号
    'slave_no'        => '',
    // 是否严格检查字段是否存在
    'fields_strict'   => true,
    // 数据集返回类型
    'resultset_type'  => 'array',
    // 自动写入时间戳字段
    'auto_timestamp'  => false,
    // 时间字段取出后的默认时间格式
    'datetime_format' => 'Y-m-d H:i:s',
    // 是否需要进行SQL性能分析
    'sql_explain'     => false,
    // Builder类
    'builder'         => '',
    // Query类
    'query'           => '\\think\\db\\Query',
];
INFO;
        file_put_contents(CONF_PATH . 'database.php', $code);
        // 判断写入是否成功
        $config = include CONF_PATH . 'database.php';
        if (empty($config['database']) || $config['database'] != $data['database']) {
            return $this->error('数据库配置写入失败,请检测环境是否满足安装要求！');
            exit;
        }
    }
}